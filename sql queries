##Basic Queries
##List all unique cities where customers are located.
SELECT distinct customer_city FROM ecommerce.customers;
----
##Count the number of orders placed in 2017.
select count(order_id) as order_count from orders
where year(order_purchase_timestamp)= 2017;
-----
##Find the total sales per category.
select pr.product_category as category, round(sum(pa.payment_value),2) as sales from products pr
join order_items o on pr.product_id=o.product_id
join payments pa on pa.order_id= o.order_id
group by category;
--------
##Calculate the percentage of orders that were paid in installments.
select sum(case when payment_installments>=1 then 1 else 0 end)*100/count(payment_installments) as percent_count
from payments;
------
##Count the number of customers from each state.
select customer_state, count(customer_id) as customer_count from customers
group by customer_state;

##Intermediate Queries
##Calculate the number of orders per month in 2018.
select monthname(order_purchase_timestamp) as Months,count(order_id) as Count_orders from orders
where year(order_purchase_timestamp)=2018
group by Months;
----
##Find the average number of products per order, grouped by customer city.
with cte as (select orders.order_id, customers.customer_city,  count(order_items.order_id) as oc
from orders join order_items on orders.order_id=order_items.order_id
join customers on orders.customer_id=customers.customer_id
group by orders.order_id, orders.customer_id,customers.customer_city)
select customer_city, round(avg(cte.oc),2) as avg_orders
from cte
group by customer_city
order by avg_orders desc;
----
##Calculate the percentage of total revenue contributed by each product category.
select pr.product_category as category, round(sum(pa.payment_value)*100/(select sum(payment_value) from payments),2) as revenue from products pr
join order_items o on pr.product_id=o.product_id
join payments pa on pa.order_id= o.order_id
group by category
order by revenue desc;
------
##Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category, count(order_items.product_id) as product_count, round(avg(order_items.price),2) as product_price
from products join order_items
on products.product_id=order_items.product_id
group by products.product_category;
-----
##Calculate the total revenue generated by each seller, and rank them by revenue.
with cte as (select order_items.seller_id, round(sum(payments.payment_value),2) as revenue
from order_items join payments on order_items.order_id=payments.order_id
group by order_items.seller_id)
select *, dense_rank() over(order by revenue desc) as rnk
from cte;

##Advanced Queries
##Calculate the moving average of order values for each customer over their order history.
select *, avg(payment) over(partition by customer_id order by order_purchase_timestamp rows between 2 preceding and current row) as moving_avg
from 
(select orders.customer_id, orders.order_purchase_timestamp, payments.payment_value as payment from orders
join payments on orders.order_id=payments.order_id) as a;
-----
##Calculate the cumulative sales per month for each year.
select years,months, sum(sales) over(order by years,months) as cumulative_sales
from (select year(orders.order_purchase_timestamp) years, month(orders.order_purchase_timestamp) as months,
round(sum(payments.payment_value),2) as sales from orders join payments on orders.order_id=payments.order_id
group by years,months
order by years,months) as a;
-------
##Calculate the year-over-year growth rate of total sales.
with cte as (select year(orders.order_purchase_timestamp) years, round(sum(payments.payment_value),2) as sales
from orders join payments on orders.order_id=payments.order_id
group by years
order by years)
select years, ifnull(round((sales-lag(sales) over(order by years))*100/lag(sales) over(order by years),2),0) as yoy_growth from cte;
-----
##Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
with a as (select customers.customer_id,
min(orders.order_purchase_timestamp) first_order
from customers join orders
on customers.customer_id = orders.customer_id
group by customers.customer_id),
b as (select a.customer_id, count(distinct orders.order_purchase_timestamp) next_order
from a join orders
on orders.customer_id = a.customer_id
and orders.order_purchase_timestamp > first_order
and orders.order_purchase_timestamp < 
date_add(first_order, interval 6 month)
group by a.customer_id) 

select 100 * (count( distinct a.customer_id)/ count(distinct b.customer_id)) as rentention_rate
from a left join b 
on a.customer_id = b.customer_id;
------
##Identify the top 3 customers who spent the most money in each year.
with cte as (select year(orders.order_purchase_timestamp) as Years, orders.customer_id, round(sum(payments.payment_value),2) as money
from orders join payments on orders.order_id= payments.order_id
group by Years, orders.customer_id)
select * from (select *, row_number() over(partition by Years order by money desc) as rnk
from cte) as a where rnk<=3;
